{
  "version": 1,
  "id": "nayms-admin",
  "title": "Nayms Admin",
  "description": "The Nayms admin interface, for the overlords.",
  "aboutUrl": "https://github.com/nayms/contracts",
  "constants": {
    "aclAddress": {
      "default": ""
    },
    "entityDeployerAddress": {
      "default": ""
    },
    "settingsAddress": {
      "default": ""
    },
    "marketAddress": {
      "default": ""
    },
    "roles": {
      "default": [
        {
          "label": "invalid",
          "value": "invalid"
        }
      ]
    },
    "settings": {
      "default": [
        {
          "label": "invalid",
          "value": "invalid"
        }
      ]
    },
    "policyTypes": {
      "default": [
        {
          "label": "SPV",
          "value": "0"
        },
        {
          "label": "Portfolio",
          "value": "1"
        }
      ]
    }
  },
  "panels": [
    {
      "id": "getSettings",
      "title": "Settings: Check addresses",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Settings contract",
          "type": "address",
          "initialValue": "@constant[settingsAddress]",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "key",
          "title": "Setting",
          "type": "bytes32",
          "options": "@constant[settings]"
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "Settings",
          "method": "getRootAddress",
          "address": "@input[contractAddress]",
          "args": {
            "_key": "@input[key]"
          },
          "saveResultAsInput": "addr"
        },
        {
          "type": "call",
          "contract": "Settings",
          "method": "getRootAddresses",
          "address": "@input[contractAddress]",
          "args": {
            "_key": "@input[key]"
          },
          "saveResultAsInput": "addrList"
        },
        {
          "type": "call",
          "contract": "Settings",
          "method": "getTime",
          "address": "@input[contractAddress]",
          "saveResultAsInput": "getTime"
        }
      ],
      "outputs": [
        {
          "title": "Address",
          "type": "address",
          "value": "@input[addr]"
        },
        {
          "title": "Addresses",
          "type": "address[]",
          "value": "@input[addrList]"
        },
        {
          "title": "Current time",
          "type": "address",
          "value": "@input[getTime]",
          "transform": [
            {
              "type": "intToDateString",
              "format": "MMM dd, yyyy - HH:mm:ss"
            }
          ]
        }
      ]
    },
    {
      "id": "isAdmin",
      "title": "ACL: Check if user is admin",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "ACL contract address",
          "description": "The address of the ACL contract",
          "type": "address",
          "initialValue": "@constant[aclAddress]",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "address",
          "title": "Address",
          "type": "address"
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "ACL",
          "method": "isAdmin",
          "address": "@input[contractAddress]",
          "args": {
            "_addr": "@input[address]"
          },
          "saveResultAsInput": "isAdmin"
        }
      ],
      "outputs": [
        {
          "title": "Is admin",
          "type": "bool",
          "value": "@input[isAdmin]"
        }
      ]
    },
    {
      "id": "addAdmin",
      "title": "ACL: Add admin",
      "description": "You must be an admin to do this",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "ACL contract address",
          "initialValue": "@constant[aclAddress]",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "address",
          "title": "Address",
          "type": "address"
        }
      ],
      "execs": [
        {
          "type": "send",
          "contract": "ACL",
          "method": "addAdmin",
          "address": "@input[contractAddress]",
          "args": {
            "_addr": "@input[address]"
          }
        }
      ]
    },
    {
      "id": "getNumContexts",
      "title": "ACL: Get no. of contexts",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "ACL contract address",
          "type": "address",
          "initialValue": "@constant[aclAddress]",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "ACL",
          "method": "getNumContexts",
          "address": "@input[contractAddress]",
          "saveResultAsInput": "numContexts"
        }
      ],
      "outputs": [
        {
          "title": "No. of contexts",
          "type": "string",
          "value": "@input[numContexts]"
        }
      ]
    },
    {
      "id": "getContext",
      "title": "ACL: Get context",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "ACL contract address",
          "type": "address",
          "initialValue": "@constant[aclAddress]",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "index",
          "title": "Index",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "ACL",
          "method": "getContextAtIndex",
          "address": "@input[contractAddress]",
          "args": {
            "_index": "@input[index]"
          },
          "saveResultAsInput": "context"
        }
      ],
      "outputs": [
        {
          "title": "Context",
          "type": "string",
          "value": "@input[context]"
        }
      ]
    },
    {
      "id": "genContext",
      "title": "ACL: Generate context for address",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "ACL contract address",
          "description": "The address of the ACL contract",
          "type": "address",
          "initialValue": "@constant[aclAddress]",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "address",
          "title": "Address",
          "type": "address"
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "ACL",
          "method": "generateContextFromAddress",
          "address": "@input[contractAddress]",
          "args": {
            "_addr": "@input[address]"
          },
          "saveResultAsInput": "generatedContext"
        }
      ],
      "outputs": [
        {
          "title": "Generated context",
          "type": "string",
          "value": "@input[generatedContext]"
        }
      ]
    },
    {
      "id": "getContextForContract",
      "title": "AccessControl: Get contract's own context",
      "description": "This only works for contracts which talk to the ACL.",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Contract address",
          "description": "The address of the contract",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "IAccessControl",
          "method": "aclContext",
          "address": "@input[contractAddress]",
          "saveResultAsInput": "aclContext"
        }
      ],
      "outputs": [
        {
          "title": "Contract's own context",
          "type": "string",
          "value": "@input[aclContext]"
        }
      ]
    },
    {
      "id": "getVersionInfo",
      "title": "Version: Get contract implementation version",
      "description": "This only works for upgradeable contracts (Entity, Policy).",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Contract address",
          "description": "The address of the contract",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "IDiamondUpgradeFacet",
          "method": "getVersionInfo",
          "address": "@input[contractAddress]",
          "saveResultAsInput": "versionInfo"
        }
      ],
      "outputs": [
        {
          "title": "Version number",
          "type": "int",
          "value": "@input[versionInfo][num_]"
        },
        {
          "title": "Date",
          "type": "string",
          "value": "@input[versionInfo][date_]",
          "transform": [
            {
              "type": "intToDateString",
              "format": "MMM dd, yyyy - HH:mm:ss"
            }
          ]
        },
        {
          "title": "Git commit",
          "type": "string",
          "value": "@input[versionInfo][hash_]"
        }
      ]
    },
    {
      "id": "assignRole",
      "title": "ACL: Assign role",
      "description": "You must be an admin or an assigner for the role to do this",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "ACL contract address",
          "type": "address",
          "initialValue": "@constant[aclAddress]",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "contextAddress",
          "title": "Context address",
          "type": "address"
        },
        {
          "name": "userAddress",
          "title": "User address",
          "type": "address"
        },
        {
          "name": "role",
          "title": "Role",
          "type": "bytes32",
          "options": "@constant[roles]"
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "ACL",
          "method": "generateContextFromAddress",
          "address": "@input[contractAddress]",
          "args": {
            "_addr": "@input[contextAddress]"
          },
          "saveResultAsInput": "generatedContext"
        },
        {
          "type": "send",
          "contract": "ACL",
          "method": "assignRole",
          "address": "@input[contractAddress]",
          "args": {
            "_context": "@input[generatedContext]",
            "_addr": "@input[userAddress]",
            "_role": "@input[role]"
          }
        }
      ]
    },
    {
      "id": "unassignRole",
      "title": "ACL: Un-assign role",
      "description": "You must be an admin or an assigner for the role to do this",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "ACL contract address",
          "type": "address",
          "initialValue": "@constant[aclAddress]",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "contextAddress",
          "title": "Context address",
          "type": "address"
        },
        {
          "name": "userAddress",
          "title": "User address",
          "type": "address"
        },
        {
          "name": "role",
          "title": "Role",
          "type": "bytes32",
          "options": "@constant[roles]"
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "ACL",
          "method": "generateContextFromAddress",
          "address": "@input[contractAddress]",
          "args": {
            "_addr": "@input[contextAddress]"
          },
          "saveResultAsInput": "generatedContext"
        },
        {
          "type": "send",
          "contract": "ACL",
          "method": "unassignRole",
          "address": "@input[contractAddress]",
          "args": {
            "_context": "@input[generatedContext]",
            "_addr": "@input[userAddress]",
            "_role": "@input[role]"
          }
        }
      ]
    },
    {
      "id": "hasRole",
      "title": "ACL: Does user have role?",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "ACL contract address",
          "type": "address",
          "initialValue": "@constant[aclAddress]",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "contextAddress",
          "title": "Context address",
          "type": "address"
        },
        {
          "name": "address",
          "title": "Address",
          "type": "address"
        },
        {
          "name": "role",
          "title": "Role",
          "type": "bytes32",
          "options": "@constant[roles]"
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "ACL",
          "method": "generateContextFromAddress",
          "address": "@input[contractAddress]",
          "args": {
            "_addr": "@input[contextAddress]"
          },
          "saveResultAsInput": "generatedContext"
        },
        {
          "type": "call",
          "contract": "ACL",
          "method": "hasRole",
          "address": "@input[contractAddress]",
          "args": {
            "_context": "@input[generatedContext]",
            "_addr": "@input[address]",
            "_role": "@input[role]"
          },
          "saveResultAsInput": "has"
        }
      ],
      "outputs": [
        {
          "title": "Has role",
          "type": "int",
          "value": "@input[has]",
          "transform": [
            {
              "type": "toMappedString",
              "options": {
                "0": "Does not have role",
                "1": "Has role in given context",
                "2": "Has role in system context"
              }              
            }
          ]
        }
      ]
    },
    {
      "id": "deployEntity",
      "title": "EntityDeployer: Deploy entity",
      "description": "You must be an admin to do this",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "EntityDeployer contract address",
          "type": "address",
          "initialValue": "@constant[entityDeployerAddress]",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "entityAdmin",
          "title": "Entity admin address",
          "type": "address"
        },
        {
          "name": "entityContext",
          "title": "Entity context",
          "type": "bytes32",
          "optional": true
        }
      ],
      "execs": [
        {
          "type": "send",
          "contract": "EntityDeployer",
          "method": "deploy",
          "args": {
            "_entityAdmin": "@input[entityAdmin]",
            "_entityContext": "@input[entityContext]"
          },
          "address": "@input[contractAddress]"
        }
      ]
    },
    {
      "id": "getEntityCount",
      "title": "EntityDeployer: Get no. of entities",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "EntityDeployer contract address",
          "type": "address",
          "initialValue": "@constant[entityDeployerAddress]",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "EntityDeployer",
          "method": "getNumChildren",
          "address": "@input[contractAddress]",
          "saveResultAsInput": "numEntities"
        }
      ],
      "outputs": [
        {
          "title": "No. of entities",
          "type": "int",
          "value": "@input[numEntities]"
        }
      ]
    },
    {
      "id": "getEntity",
      "title": "EntityDeployer: Get entity",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "EntityDeployer contract address",
          "type": "address",
          "initialValue": "@constant[entityDeployerAddress]",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "index",
          "title": "Index",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "1"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "EntityDeployer",
          "method": "getChild",
          "address": "@input[contractAddress]",
          "args": {
            "_index": "@input[index]"
          },
          "saveResultAsInput": "entityAddress"
        }
      ],
      "outputs": [
        {
          "title": "Entity",
          "type": "address",
          "value": "@input[entityAddress]"
        }
      ]
    },
    {
      "id": "getNumPolicies",
      "title": "Entity: Get no. of policies",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Entity contract address",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "IEntity",
          "method": "getNumChildren",
          "address": "@input[contractAddress]",
          "saveResultAsInput": "numPolicies"
        }
      ],
      "outputs": [
        {
          "title": "No. of policies",
          "type": "int",
          "value": "@input[numPolicies]"
        }
      ]
    },
    {
      "id": "getPolicyAtIndex",
      "title": "Entity: Get policies at index",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Entity contract address",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "index",
          "title": "Index",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "1"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "IEntity",
          "method": "getChild",
          "address": "@input[contractAddress]",
          "args": {
            "_index": "@input[index]"
          },
          "saveResultAsInput": "policyAddress"
        }
      ],
      "outputs": [
        {
          "title": "Policy address",
          "type": "address",
          "value": "@input[policyAddress]"
        }
      ]
    },
    {
      "id": "heartbeat",
      "title": "Policy: Heartbeat",
      "description": "Anyone can call this",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Policy address",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "send",
          "contract": "IPolicy",
          "method": "checkAndUpdateState",
          "address": "@input[contractAddress]"
        }
      ]
    },
    {
      "id": "getpolicyInfo",
      "title": "Policy: Get info",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Policy contract address",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "IPolicy",
          "method": "getInfo",
          "address": "@input[contractAddress]",
          "saveResultAsInput": "policyInfo"
        }
      ],
      "outputs": [
        {
          "title": "No. of tranches",
          "type": "int",
          "value": "@input[policyInfo][numTranches_]"
        },
        {
          "title": "Payment token",
          "type": "address",
          "value": "@input[policyInfo][unit_]"
        },
        {
          "title": "State",
          "type": "int",
          "value": "@input[policyInfo][state_]",
          "transform": [
            {
              "type": "toMappedString",
              "options": {
                "0": "Created",
                "1": "Initial sale",
                "2": "Active",
                "3": "Matured"
              }
            }
          ]
        },
        {
          "title": "Initiation date",
          "type": "string",
          "value": "@input[policyInfo][initiationDate_]",
          "transform": [
            {
              "type": "intToDateString",
              "format": "MMM dd, yyyy - HH:mm:ss"
            }
          ]
        },
        {
          "title": "Start date",
          "type": "string",
          "value": "@input[policyInfo][startDate_]",
          "transform": [
            {
              "type": "intToDateString",
              "format": "MMM dd, yyyy - HH:mm:ss"
            }
          ]
        },
        {
          "title": "Maturation date",
          "type": "string",
          "value": "@input[policyInfo][maturationDate_]",
          "transform": [
            {
              "type": "intToDateString",
              "format": "MMM dd, yyyy - HH:mm:ss"
            }
          ]
        },
        {
          "title": "Premium interval (seconds)",
          "type": "int",
          "value": "@input[policyInfo][premiumIntervalSeconds_]"
        },
        {
          "title": "Broker commission basis-points",
          "type": "int",
          "value": "@input[policyInfo][brokerCommissionBP_]"
        },
        {
          "title": "Claims admin commission basis-points",
          "type": "int",
          "value": "@input[policyInfo][claimsAdminCommissionBP_]"
        },
        {
          "title": "Nayms commission basis-points",
          "type": "int",
          "value": "@input[policyInfo][naymsCommissionBP_]"
        }
      ]
    },
    {
      "id": "getTrancheInfo",
      "title": "Policy: Get tranche info",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Policy contract address",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "index",
          "title": "Tranche index (0-based)",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "IPolicy",
          "method": "getTrancheInfo",
          "address": "@input[contractAddress]",
          "args": {
            "_index": "@input[index]"
          },
          "saveResultAsInput": "trancheInfo"
        }
      ],
      "outputs": [
        {
          "title": "Token address",
          "type": "address",
          "value": "@input[trancheInfo][token_]"
        },
        {
          "title": "State",
          "type": "int",
          "value": "@input[trancheInfo][state_]",
          "transform": [
            {
              "type": "toMappedString",
              "options": {
                "0": "Created",
                "1": "Initial sale",
                "2": "Active",
                "3": "Matured",
                "4": "Cancelled"
              }
            }
          ]
        },
        {
          "title": "Balance (payment unit tokens)",
          "type": "int",
          "scale": "-18",
          "unit": "Tokens",
          "value": "@input[trancheInfo][balance_]"
        },
        {
          "title": "No. of premiums in total",
          "type": "int",
          "value": "@input[trancheInfo][numPremiums_]"
        },
        {
          "title": "No. of premiums paid",
          "type": "int",
          "value": "@input[trancheInfo][numPremiumsPaid_]"
        },
        {
          "title": "No. of premiums missed",
          "type": "int",
          "value": "@input[trancheInfo][premiumPaymentsMissed_]"
        },
        {
          "title": "Next premium index",
          "type": "int",
          "value": "@input[trancheInfo][nextPremiumIndex_]"
        },
        {
          "title": "Next premium due",
          "type": "int",
          "scale": "-18",
          "unit": "Tokens",
          "value": "@input[trancheInfo][nextPremiumAmount_]"
        },
        {
          "title": "When next premium is due by",
          "type": "string",
          "value": "@input[trancheInfo][nextPremiumDueAt_]",
          "transform": [
            {
              "type": "intToDateString",
              "format": "MMM dd, yyyy - HH:mm:ss"
            }
          ]
        },
        {
          "title": "Shared sold",
          "type": "int",
          "value": "@input[trancheInfo][sharesSold_]"
        },
        {
          "title": "Market offer id for initial sale",
          "type": "int",
          "value": "@input[trancheInfo][initialSaleOfferId_]"
        },
        {
          "title": "Market offer id for buyback",
          "type": "int",
          "value": "@input[trancheInfo][finalBuybackofferId_]"
        }
      ]
    },
    {
      "id": "getTranchePremiumInfo",
      "title": "Policy: Get premium info",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Policy contract address",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "trancheIndex",
          "title": "Tranche index (0-based)",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        },
        {
          "name": "premiumIndex",
          "title": "Premium index (0-based)",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "IPolicy",
          "method": "getTranchePremiumInfo",
          "address": "@input[contractAddress]",
          "args": {
            "_trancheIndex": "@input[trancheIndex]",
            "_premiumIndex": "@input[premiumIndex]"
          },
          "saveResultAsInput": "premiumInfo"
        }
      ],
      "outputs": [
        {
          "title": "Amount",
          "type": "int",
          "scale": "-18",
          "unit": "Tokens",
          "value": "@input[premiumInfo][amount_]"
        },
        {
          "title": "Due by",
          "type": "string",
          "value": "@input[premiumInfo][dueAt_]",
          "transform": [
            {
              "type": "intToDateString",
              "format": "MMM dd, yyyy - HH:mm:ss"
            }
          ]
        },
        {
          "title": "Paid by",
          "type": "address",
          "value": "@input[premiumInfo][paidBy_]"
        },
        {
          "title": "Paid at",
          "type": "string",
          "value": "@input[premiumInfo][paidAt_]",
          "transform": [
            {
              "type": "intToDateString",
              "format": "MMM dd, yyyy - HH:mm:ss"
            }
          ]
        }
      ]
    },
    {
      "id": "payPremiumDirectly",
      "title": "Policy: Pay a tranche premium directly",
      "description": "Anyone can do this. Just ensure the payment token has approved the policy to transfer.",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Policy contract address",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "index",
          "title": "Tranche index (0-based)",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        },
        {
          "name": "amount",
          "title": "Amount to pay (in WEI)",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "send",
          "contract": "IPolicy",
          "method": "payTranchePremium",
          "address": "@input[contractAddress]",
          "args": {
            "_index": "@input[index]",
            "_amount": "@input[amount]"
          }
        }
      ]
    },
    {
      "id": "payPremiumViaEntity",
      "title": "Entity: Pay a tranche premium",
      "description": "Only entity reps who are insured partys of the policy can do this.",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Entity contract address",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "policyAddress",
          "title": "Policy contract address",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "index",
          "title": "Tranche index (0-based)",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        },
        {
          "name": "amount",
          "title": "Amount to pay (in WEI)",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "send",
          "contract": "IEntity",
          "method": "payTranchePremium",
          "address": "@input[contractAddress]",
          "args": {
            "_policy": "@input[policyAddress]",
            "_trancheIndex": "@input[index]",
            "_amount": "@input[amount]"
          }
        }
      ]
    },
    {
      "id": "makeClaim",
      "title": "Claim: Create new",
      "description": "Only entity reps of the insured party can do this.",
      "inputs": [
        {
          "name": "policyAddress",
          "title": "Policy contract address",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "index",
          "title": "Tranche index (0-based)",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        },
        {
          "name": "amount",
          "title": "Amount to claim (in WEI)",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "send",
          "contract": "IPolicy",
          "method": "makeClaim",
          "address": "@input[policyAddress]",
          "args": {
            "_trancheIndex": "@input[index]",
            "_amount": "@input[amount]"
          }
        }
      ]
    },
    {
      "id": "getClaimInfo",
      "title": "Claim: Get info",
      "inputs": [
        {
          "name": "policyAddress",
          "title": "Policy contract address",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "index",
          "title": "Claim index (0-based)",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "IPolicy",
          "method": "getClaimInfo",
          "address": "@input[policyAddress]",
          "args": {
            "_claimIndex": "@input[index]"
          },
          "saveResultAsInput": "details"
        }
      ],
      "outputs": [
        {
          "title": "Claim amount",
          "type": "int",
          "value": "@input[details][amount_]"
        },
        {
          "title": "Tranche index",
          "type": "int",
          "value": "@input[details][trancheIndex_]"
        },
        {
          "title": "State",
          "type": "int",
          "value": "@input[details][state_]",
          "transform": [
            {
              "type": "toMappedString",
              "options": {
                "0": "Created",
                "2": "Approved",
                "3": "Declined",
                "5": "Paid"
              }
            }
          ]
        },
        {
          "title": "Is disputed?",
          "type": "bool",
          "value": "@input[details][disputed_]"
        },
        {
          "title": "Is acknowledged?",
          "type": "bool",
          "value": "@input[details][acknowledged_]"
        }
      ]
    },
    {
      "id": "disputeClaim",
      "title": "Claim: Dispute",
      "description": "Only entity reps of the underwriter can do this.",
      "inputs": [
        {
          "name": "policyAddress",
          "title": "Policy contract address",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "index",
          "title": "Claim index (0-based)",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "send",
          "contract": "IPolicy",
          "method": "disputeClaim",
          "address": "@input[policyAddress]",
          "args": {
            "_claimIndex": "@input[index]"
          }
        }
      ]
    },
    {
      "id": "acknowledgeClaim",
      "title": "Claim: Acknowledge",
      "description": "Only entity reps of the underwriter can do this.",
      "inputs": [
        {
          "name": "policyAddress",
          "title": "Policy contract address",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "index",
          "title": "Claim index (0-based)",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "send",
          "contract": "IPolicy",
          "method": "acknowledgeClaim",
          "address": "@input[policyAddress]",
          "args": {
            "_claimIndex": "@input[index]"
          }
        }
      ]
    },
    {
      "id": "approveClaim",
      "title": "Claim: Approve",
      "description": "Only entity reps of the claims admin can do this.",
      "inputs": [
        {
          "name": "policyAddress",
          "title": "Policy contract address",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "index",
          "title": "Claim index (0-based)",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "send",
          "contract": "IPolicy",
          "method": "approveClaim",
          "address": "@input[policyAddress]",
          "args": {
            "_claimIndex": "@input[index]"
          }
        }
      ]
    },
    {
      "id": "declineClaim",
      "title": "Claim: Decline",
      "description": "Only entity reps of the claims admin can do this.",
      "inputs": [
        {
          "name": "policyAddress",
          "title": "Policy contract address",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "index",
          "title": "Claim index (0-based)",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "send",
          "contract": "IPolicy",
          "method": "declineClaim",
          "address": "@input[policyAddress]",
          "args": {
            "_claimIndex": "@input[index]"
          }
        }
      ]
    },
    {
      "id": "payClaim",
      "title": "Claim: Pay",
      "description": "Only entity reps of the claims admin can do this.",
      "inputs": [
        {
          "name": "policyAddress",
          "title": "Policy contract address",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "index",
          "title": "Claim index (0-based)",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "send",
          "contract": "IPolicy",
          "method": "payClaim",
          "address": "@input[policyAddress]",
          "args": {
            "_claimIndex": "@input[index]"
          }
        }
      ]
    },
    {
      "id": "getLastOfferId",
      "title": "Market: Last Offer ID",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Market address",
          "initialValue": "@constant[marketAddress]",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "IMarket",
          "method": "getLastOfferId",
          "address": "@input[contractAddress]",
          "saveResultAsInput": "details"
        }
      ],
      "outputs": [
        {
          "title": "Last Offer ID",
          "type": "int",
          "value": "@input[details]"
        }
      ]
    },
    {
      "id": "getOffer",
      "title": "Market: Get Offer by ID",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Market address",
          "initialValue": "@constant[marketAddress]",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "offerId",
          "title": "Offer ID",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "IMarket",
          "method": "getOffer",
          "address": "@input[contractAddress]",
          "args": {
            "_offerId": "@input[offerId]"
          },
          "saveResultAsInput": "details"
        }
      ],
      "outputs": [
        {
          "title": "Creator",
          "type": "address",
          "value": "@input[details][creator_]"
        },
        {
          "title": "Sell token",
          "type": "address",
          "value": "@input[details][sellToken_]"
        },
        {
          "title": "Sell amount",
          "type": "int",
          "value": "@input[details][sellAmount_]"
        },
        {
          "title": "Initial Sell amount",
          "type": "int",
          "value": "@input[details][sellAmountInitial_]"
        },
        {
          "title": "Buy token",
          "type": "address",
          "value": "@input[details][buyToken_]"
        },
        {
          "title": "Buy amount",
          "type": "int",
          "value": "@input[details][buyAmount_]"
        },
        {
          "title": "Initial Buy amount",
          "type": "int",
          "value": "@input[details][buyAmountInitial_]"
        },
        {
          "title": "Average Price",
          "type": "int",
          "value": "@input[details][averagePrice_]"
        },
        {
          "title": "Fee Schedule",
          "type": "int",
          "value": "@input[details][feeSchedule_]"
        },
        {
          "title": "Notify",
          "type": "address",
          "value": "@input[details][notify_]"
        },
        {
          "title": "State",
          "type": "int",
          "value": "@input[details][state_]",
          "transform": [
            {
              "type": "toMappedString",
              "options": {
                "1": "Active",
                "2": "Cancelled",
                "3": "Fulfilled"
              }
            }
          ]
        }
      ]
    },
    {
      "id": "isActive",
      "title": "Market: Is Offer Active?",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Market address",
          "initialValue": "@constant[marketAddress]",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "offerId",
          "title": "Offer ID",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "IMarket",
          "method": "isActive",
          "address": "@input[contractAddress]",
          "args": {
            "_offerId": "@input[offerId]"
          },
          "saveResultAsInput": "details"
        }
      ],
      "outputs": [
        {
          "title": "Is active?",
          "type": "bool",
          "value": "@input[details]"
        }
      ]
    },
    {
      "id": "getOfferSiblings",
      "title": "Market: Offer Siblings",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Market address",
          "initialValue": "@constant[marketAddress]",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "offerId",
          "title": "Offer ID",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "IMarket",
          "method": "getOfferSiblings",
          "address": "@input[contractAddress]",
          "args": {
            "_offerId": "@input[offerId]"
          },
          "saveResultAsInput": "details"
        }
      ],
      "outputs": [
        {
          "title": "Next Offer ID",
          "type": "int",
          "value": "@input[details][nextOfferId_]"
        },
        {
          "title": "Previous Offer ID",
          "type": "int",
          "value": "@input[details][prevOfferId_]"
        }
      ]
    },
    {
      "id": "getBestOfferId",
      "title": "Market: Get Best Offer ID",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Market address",
          "initialValue": "@constant[marketAddress]",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "_sellToken",
          "title": "Sell Token",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "_buyToken",
          "title": "Buy Token",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "IMarket",
          "method": "getBestOfferId",
          "address": "@input[contractAddress]",
          "args": {
            "_sellToken": "@input[_sellToken]",
            "_buyToken": "@input[_buyToken]"
          },
          "saveResultAsInput": "details"
        }
      ],
      "outputs": [
        {
          "title": "Best Offer ID",
          "type": "int",
          "value": "@input[details]"
        }
      ]
    },
    {
      "id": "calculateFee",
      "title": "Market: Calculate Fee",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Market address",
          "initialValue": "@constant[marketAddress]",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "_sellToken",
          "title": "Sell Token",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "_sellAmount",
          "title": "Sell Amount",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        },
        {
          "name": "_buyToken",
          "title": "Buy Token",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "_buyAmount",
          "title": "Buy Amount",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        },
        {
          "name": "_feeSchedule",
          "title": "Fee Schedule",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "IMarket",
          "method": "calculateFee",
          "address": "@input[contractAddress]",
          "args": {
            "_sellToken": "@input[_sellToken]",
            "_sellAmount": "@input[_sellAmount]",
            "_buyToken": "@input[_buyToken]",
            "_buyAmount": "@input[_buyAmount]",
            "_feeSchedule": "@input[_feeSchedule]"
          },
          "saveResultAsInput": "details"
        }
      ],
      "outputs": [
        {
          "title": "Fee Token",
          "type": "address",
          "value": "@input[details][feeToken_]"
        },
        {
          "title": "Fee Amount",
          "type": "int",
          "value": "@input[details][feeAmount_]"
        }
      ]
    },
    {
      "id": "simulateMarketOffer",
      "title": "Market: Simulate Market Offer",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Market address",
          "initialValue": "@constant[marketAddress]",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "_sellToken",
          "title": "Sell Token",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "_sellAmount",
          "title": "Sell Amount",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        },
        {
          "name": "_buyToken",
          "title": "Buy Token",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "IMarket",
          "method": "simulateMarketOffer",
          "address": "@input[contractAddress]",
          "args": {
            "_sellToken": "@input[_sellToken]",
            "_sellAmount": "@input[_sellAmount]",
            "_buyToken": "@input[_buyToken]"
          },
          "saveResultAsInput": "details"
        }
      ],
      "outputs": [
        {
          "title": "Bought Amount",
          "type": "int",
          "value": "@input[details]"
        }
      ]
    },
    {
      "id": "cancel",
      "title": "Market: Cancel Offer",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Market address",
          "initialValue": "@constant[marketAddress]",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "offerId",
          "title": "Offer ID",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "IMarket",
          "method": "cancel",
          "address": "@input[contractAddress]",
          "args": {
            "_offerId": "@input[offerId]"
          },
          "saveResultAsInput": "details"
        }
      ],
      "outputs": [ ]
    },
    {
      "id": "buy",
      "title": "Market: Buy Offer",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Market address",
          "initialValue": "@constant[marketAddress]",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "offerId",
          "title": "Offer ID",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        },
        {
          "name": "amount",
          "title": "Amount",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "IMarket",
          "method": "buy",
          "address": "@input[contractAddress]",
          "args": {
            "_offerId": "@input[offerId]",
            "_amount": "@input[amount]"
          },
          "saveResultAsInput": "details"
        }
      ],
      "outputs": [ ]
    },
    {
      "id": "executeLimitOffer",
      "title": "Market: Execute Limit Offer",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Market address",
          "initialValue": "@constant[marketAddress]",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "_sellToken",
          "title": "Sell Token",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "_sellAmount",
          "title": "Sell Amount",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        },
        {
          "name": "_buyToken",
          "title": "Buy Token",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "_buyAmount",
          "title": "Buy Amount",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        },
        {
          "name": "_feeSchedule",
          "title": "Fee Schedule",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        },
        {
          "name": "_notify",
          "title": "Notify",
          "initialValue": "0x0000000000000000000000000000000000000000",
          "type": "address"
        },
        {
          "name": "_notifyData",
          "title": "Notify Data",
          "initialValue": "0x0",
          "type": "string"
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "IMarket",
          "method": "executeLimitOffer",
          "address": "@input[contractAddress]",
          "args": {
            "_sellToken": "@input[_sellToken]",
            "_sellAmount": "@input[_sellAmount]",
            "_buyToken": "@input[_buyToken]",
            "_buyAmount": "@input[_buyAmount]",
            "_feeSchedule": "@input[_feeSchedule]",
            "_notify": "@input[_notify]",
            "_notifyData": "@input[_notifyData]"
          },
          "saveResultAsInput": "details"
        }
      ],
      "outputs": [
        {
          "title": "Limit Offer Id",
          "type": "address",
          "value": "@input[details]"
        }
      ]
    },
    {
      "id": "executeMarketOffer",
      "title": "Market: Execute Market Offer",
      "inputs": [
        {
          "name": "contractAddress",
          "title": "Market address",
          "initialValue": "@constant[marketAddress]",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "_sellToken",
          "title": "Sell Token",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        },
        {
          "name": "_sellAmount",
          "title": "Sell Amount",
          "type": "int",
          "validation": [
            {
              "type": "range",
              "min": "0"
            }
          ]
        },
        {
          "name": "_buyToken",
          "title": "Buy Token",
          "type": "address",
          "validation": [
            {
              "type": "allowedTypes",
              "contract": true
            }
          ]
        }
      ],
      "execs": [
        {
          "type": "call",
          "contract": "IMarket",
          "method": "executeMarketOffer",
          "address": "@input[contractAddress]",
          "args": {
            "_sellToken": "@input[_sellToken]",
            "_sellAmount": "@input[_sellAmount]",
            "_buyToken": "@input[_buyToken]"
          },
          "saveResultAsInput": "details"
        }
      ],
      "outputs": [ ]
    }
  ]
}
